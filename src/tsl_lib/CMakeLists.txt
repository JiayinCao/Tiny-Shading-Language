#
#   This file is a part of Tiny-Shading-Language or TSL, an open-source cross
#   platform programming shading language.
#
#   Copyright (c) 2020-2020 by Jiayin Cao - All rights reserved.
#
#   TSL is a free software written for educational purpose. Anyone can distribute
#   or modify it under the the terms of the GNU General Public License Version 3 as
#   published by the Free Software Foundation. However, there is NO warranty that
#   all components are functional in a perfect manner. Without even the implied
#   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along with
#   this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
#

# collect all files in this library
file(GLOB_RECURSE project_headers *.h *.hpp)
file(GLOB_RECURSE project_cpps *.cpp)
file(GLOB_RECURSE project_cs *.c)
file(GLOB_RECURSE project_ccs *.cc)

# group all categories of files into one macro
set(all_files ${project_headers} ${project_cpps} ${project_cs} ${project_ccs} ${tsl_include})

# give each file a proper folder based on its path
source_group_by_dir(all_files)

# a separate folder for files outside this folder
source_group( "tsl_include" FILES ${tsl_include} )

# specify the output directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY          "${TSL_SOURCE_DIR}/bin")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE  "${TSL_SOURCE_DIR}/bin")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG    "${TSL_SOURCE_DIR}/bin")

# default including folders, it is intentional to leave src folder unspecified to avoid using incorrect header files from other projects
include_directories( "${TSL_SOURCE_DIR}/src/tsl_lib" "${TSL_SOURCE_DIR}/src/include" "${TSL_SOURCE_DIR}/src/thirdparty" ${LLVM_INCLUDE_DIR} )

# this is to avoid compilation issue in the file generated by flex
add_definitions( -DYY_NO_UNISTD_H )

# make sure bison tells what is wrong
add_definitions( -DYYERROR_VERBOSE )

# inform the source code it is building tsl
add_definitions( -DBUILDING_TSL )

# no need to compile the code, but it is handy to loop them in the project for easy access
# hopefully this line won't introduce any trouble on any platforms since they are treated as input files for compiler.
set(flex_bison ${TSL_SOURCE_DIR}/src/tsl_lib/compiler/lex.l ${TSL_SOURCE_DIR}/src/tsl_lib/compiler/grammar.y)
source_group( "flex and bison" FILES ${flex_bison} )

# Generated source code
set(generated_src ${TSL_SOURCE_DIR}/generated_src/compiled_lex.cpp ${TSL_SOURCE_DIR}/generated_src/compiled_grammar.cpp ${TSL_SOURCE_DIR}/generated_src/compiled_grammar.hpp)

# add executable, this will be converted to a library in the future
if (TSL_PLATFORM_WIN)
    # that 'call' command is purely to avoid the VS 2019 warning, below is a link for further disscussion of the problem
    # https://gitlab.kitware.com/cmake/cmake/-/issues/19737
    add_library(TSL_Lib SHARED ${all_files} ${generated_src} ${flex_bison})
    add_custom_command( OUTPUT ${generated_src}
                        COMMAND call; make generate_src
                        WORKING_DIRECTORY ${TSL_SOURCE_DIR})
else()
    add_library(TSL_Lib SHARED ${all_files} ${generated_src} ${flex_bison})
    add_custom_command( OUTPUT ${generated_src}
                        COMMAND make generate_src
                        WORKING_DIRECTORY ${TSL_SOURCE_DIR})
endif()

# Separate folder for the generated files
source_group( "generated src" FILES ${generated_src} )

# Setup correct output name for different configurations
set_target_properties( TSL_Lib PROPERTIES RELEASE_OUTPUT_NAME "tsl_r" )
set_target_properties( TSL_Lib PROPERTIES DEBUG_OUTPUT_NAME "tsl_d" )
set_target_properties( TSL_Lib PROPERTIES PUBLIC_HEADER "${tsl_include}" )

# make sure this macro is defined to correctly export interface
add_definitions( -DBUILDING_TSL )

if (TSL_PLATFORM_MAC OR TSL_PLATFORM_LINUX)
   set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -pthread")
   set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
endif()

if (TSL_PLATFORM_WIN)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4244 /wd4146 /wd4267 /wd4141 /wd4624 /wd4005 /wd4996 /EHsc" )

    # enable multi-thread compiling
    SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} /MP${N}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP${N}")

    set_target_properties( TSL_Lib PROPERTIES COMPILE_FLAGS "${COMPILE_FLAGS} /MD" )
endif()

# specify the llvm library to link
llvm_map_components_to_libnames(llvm_libs MCJIT nativecodegen)

# link llvm libaries
target_link_libraries(TSL_Lib ${llvm_libs})

# By default, the libraries (LLVM) used in TSL_Lib will also be exposed to whichever program links to TSL library.
# This is totally not necessary. It is desirable to hide LLVM from programs using TSL so that it will be way easier
# to compile renderers using TSL since there is no need to setup LLVM anymore.
# This line is to prevent llvm libs to be linked in apps using this library.
set_property(TARGET TSL_Lib PROPERTY INTERFACE_LINK_LIBRARIES ${TSL_Lib})

# This allows install command
install(TARGETS TSL_Lib
		LIBRARY
          DESTINATION lib
          COMPONENT TSL_Lib
        PUBLIC_HEADER
          DESTINATION include
          COMPONENT TSL_Lib)

# generate the tsl-config file
set( TSL_LIB_NAME tsl_r )
configure_file(${TSL_SOURCE_DIR}/cmake/tsl-config.cmake.in "${TSL_SOURCE_DIR}/cmake/tsl-config.cmake" @ONLY)

# this is to topy the tsl-config.cmake file during installation
install(FILES "${TSL_SOURCE_DIR}/cmake/tsl-config.cmake"
        DESTINATION .)