/*
    This file is a part of Tiny-Shading-Language or TSL, an open-source cross
    platform programming shading language.

    Copyright (c) 2020-2020 by Jiayin Cao - All rights reserved.

    TSL is a free software written for educational purpose. Anyone can distribute
    or modify it under the the terms of the GNU General Public License Version 3 as
    published by the Free Software Foundation. However, there is NO warranty that
    all components are functional in a perfect manner. Without even the implied
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License along with
    this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 */

%{
/*
    --------------------------------------------------------------------
    WARNING:
            This file is automatically generated, do not modify.
    --------------------------------------------------------------------
*/
    
  #include <string.h>
  #include <stdio.h>
  #include <stdlib.h>
  #include "compiler/platform.h"
  #include "compiled_grammer.hpp"

  // #define DEBUG_TOKENS

  #ifdef DEBUG_TOKENS
  	#define DEBUG_INFO( ... )  printf( __VA_ARGS__ );
  #else
  	#define DEBUG_INFO( ... )  ;
  #endif

  #if __cplusplus > 199711L
    #define register      // Deprecated in C++11.
  #endif  // #if __cplusplus > 199711L
%}

%option outfile="generated_src/compiled_lex.cpp"
%option noyywrap
%option never-interactive
%option yylineno

integer_numbers          [+-]?[0-9]+
float_numbers            [+-]?([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)
one_line_comment         (\/\/)(.*\n)
multi_line_comment       \/\*[^*]*\*+(?:[^\/*][^*]*\*+)*\/
identifier               [a-zA-Z_]+[a-zA-Z_0-9]*
whitespace               [ \t\r\n\f]

%%
"do"                      {                                               return DO; }
"while"                   {                                               return WHILE; }
"for"                     {                                               return FOR; }
"if"                      {                                               return IF; }
"else"                    {                                               return ELSE; }
"--"                      {                                               return INC_OP; }
"++"                      {                                               return DEC_OP; }
":"                       {                                               return COLON; }
"?"                       {                                               return QUESTION_MARK; }
"return"                  {                                               return RETURN; }
"<<<"                     {                                               return METADATA_START; }
">>>"                     {                                               return METADATA_END; }
"int"                     {                                               return TYPE_INT; }
"float"                   {                                               return TYPE_FLOAT; }
"void"                    {                                               return TYPE_VOID; }
"."                       { DEBUG_INFO(".", yytext);                      return DOT; }
"shader"                  { DEBUG_INFO("shader_func  ->\t%s\n", yytext);  return SHADER_FUNC_ID; }
"("                       { DEBUG_INFO("%s\n", yytext);                   return L_RBRACKET; }
")"                       { DEBUG_INFO("%s\n", yytext);                   return R_RBRACKET; }
"{"                       { DEBUG_INFO("%s\n", yytext);                   return L_CBRACKET; }
"}"                       { DEBUG_INFO("%s\n", yytext);                   return R_CBRACKET; }
"["                       { DEBUG_INFO("%s\n", yytext);                   return L_SBRACKET; }
"]"                       { DEBUG_INFO("%s\n", yytext);                   return R_SBRACKET; }
"+"                       { DEBUG_INFO("%s\n", yytext);                   return OP_ADD; }
"-"                       { DEBUG_INFO("%s\n", yytext);                   return OP_MINUS; }
"*"                       { DEBUG_INFO("%s\n", yytext);                   return OP_MULT; }
"/"                       { DEBUG_INFO("%s\n", yytext);                   return OP_DIV; }
"%"                       { DEBUG_INFO("%s\n", yytext);                   return OP_MOD; }
"+="                      { DEBUG_INFO("%s\n", yytext);                   return OP_ADD_ASSIGN; }
"-="                      { DEBUG_INFO("%s\n", yytext);                   return OP_MINUS_ASSIGN; }
"*="                      { DEBUG_INFO("%s\n", yytext);                   return OP_MULT_ASSIGN; }
"/="                      { DEBUG_INFO("%s\n", yytext);                   return OP_DIV_ASSIGN; }
"%="                      { DEBUG_INFO("%s\n", yytext);                   return OP_MOD_ASSIGN; }
";"                       { DEBUG_INFO("%s\n", yytext);                   return EOL; }
","                       { DEBUG_INFO("%s\n", yytext);                   return COMMA; }
"="                       { DEBUG_INFO("%s\n", yytext);                   return OP_ASSIGN; }
"&"                       { DEBUG_INFO("%s\n", yytext);                   return OP_AND; }
"|"                       { DEBUG_INFO("%s\n", yytext);                   return OP_OR; }
"^"                       { DEBUG_INFO("%s\n", yytext);                   return OP_XOR; }
"&&"                      { DEBUG_INFO("%s\n", yytext);                   return OP_LOGIC_AND; }
"||"                      { DEBUG_INFO("%s\n", yytext);                   return OP_LOGIC_OR; }
"=="                      { DEBUG_INFO("%s\n", yytext);                   return OP_EQ; }
"!="                      { DEBUG_INFO("%s\n", yytext);                   return OP_NE; }
">="                      { DEBUG_INFO("%s\n", yytext);                   return OP_GE; }
">"                       { DEBUG_INFO("%s\n", yytext);                   return OP_G; }
"<="                      { DEBUG_INFO("%s\n", yytext);                   return OP_LE; }
"<"                       { DEBUG_INFO("%s\n", yytext);                   return OP_L; }
"<<"                      { DEBUG_INFO("%s\n", yytext);                   return OP_SHL; }
">>"                      { DEBUG_INFO("%s\n", yytext);                   return OP_SHR; }
"&="                      { DEBUG_INFO("%s\n", yytext);                   return OP_AND_ASSIGN; }
"|="                      { DEBUG_INFO("%s\n", yytext);                   return OP_OR_ASSIGN; }
"^="                      { DEBUG_INFO("%s\n", yytext);                   return OP_XOR_ASSIGN; }
"<<="                     { DEBUG_INFO("%s\n", yytext);                   return OP_SHL_ASSIGN; }
">>="                     { DEBUG_INFO("%s\n", yytext);                   return OP_SHR_ASSIGN; }
"~"                       { DEBUG_INFO("%s\n", yytext);                   return OP_COMP; }
"!"                       { DEBUG_INFO("%s\n", yytext);                   return OP_NOT; }

{identifier}              { 
                                DEBUG_INFO("indentifier  ->\t%s\n", yytext);
                                #ifdef TSL_ON_WINDOWS
                                    yylval.s = _strdup(yytext);
                                #else
                                    yylval.s = strdup(yytext);
                                #endif
                                return ID;
                          }

{float_numbers}           { 
                                DEBUG_INFO("float        ->\t%s\n", yytext);  
                                yylval.f = atof(yytext);
                                return FLT_NUM; 
                          }

{integer_numbers}         { 
                                DEBUG_INFO("int          ->\t%s\n", yytext);
                                // no over flow control for now
                                yylval.i = atoi(yytext);
                                return INT_NUM;
                          }

{one_line_comment}        { DEBUG_INFO("comment      ->\t%s\n", yytext);  }                    /* eat up one-line comments */
{multi_line_comment}      { DEBUG_INFO("comments     ->\t%s\n", yytext);  }                    /* eat up multi-line comments */
{whitespace}              { }                                            					   /* ignore whitespace */
.                         { }                                                                  /* supress output for the unknown */
%%
